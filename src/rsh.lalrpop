grammar<'input>(ctx: &mut ShellContext, input: &'input str);
use crate::{
	ShellContext,
	lexer::{self, LexerError},
	ast::{
		Command,
		CommandChain,
		Pipeline,
		ChainPart,
		VariableDefinition,
		CommandContext,
		RedirectionType,
		Type,
		Value,
		Expression,
		Statement,
		StatementGroup,
		CommandStatement,
	}
};
use std::borrow::Cow;
use lasso::Spur;

extern {
	type Location = usize;
	type Error = LexerError;

	enum lexer::Token<'input> {
		"if" => lexer::Token::If,
		"else" => lexer::Token::Else,
		"true" => lexer::Token::True,
		"false" => lexer::Token::False,
		"bool" => lexer::Token::Bool,
		"let" => lexer::Token::Let,
		"in" => lexer::Token::In,
		"int" => lexer::Token::Int,
		"str" => lexer::Token::Str,
		"any" => lexer::Token::Any,
		"fn" => lexer::Token::Fn,
		">" => lexer::Token::OutRedir,
		">>" => lexer::Token::AppendRedir,
		"<" => lexer::Token::InRedir,
		"(" => lexer::Token::LParen,
		")" => lexer::Token::RParen,
		"||" => lexer::Token::Or,
		"&&" => lexer::Token::And,
		"=" => lexer::Token::Equal,
		"$(" => lexer::Token::SubShell,
		"\n" => lexer::Token::Newline,
		"," => lexer::Token::Comma,
		";" => lexer::Token::Semicolon,
		":" => lexer::Token::Colon,
		"|" => lexer::Token::Pipe,
		"[" => lexer::Token::LBracket,
		"]" => lexer::Token::RBracket,
		"{" => lexer::Token::LBrace,
		"}" => lexer::Token::RBrace,
		"!" => lexer::Token::Bang,
		"cmd" => lexer::Token::Cmd,
		"capture" => lexer::Token::Capture,
		"=>" => lexer::Token::Arrow,
		id => lexer::Token::Identifier(<&'input str>),
		word => lexer::Token::Word(<&'input str>),
		str => lexer::Token::StrLitteral(<Cow<'input, str>>),
		istr => lexer::Token::InterpolatedString(<Cow<'input, str>>),
		int => lexer::Token::IntNum(<i64>),
	}
}

Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Value: Value<'input> = {
	"true" => Value::Bool(true),
	"false" => Value::Bool(false),
	str => Value::String(<>),
	int => Value::Int(<>),
	"[" <exprs:Comma<StrongExpression>> "]" => Value::List(exprs),
};

Word: &'input str = {
	word => <>,
	id => <>,
};

Expression: Expression<'input> = {
	Value => Expression::Value(<>),
	<fun:Expression> "(" <mut exps:(<Expression> ",")*> <tl:Expression?> ")" => Expression::Call {
		function: Box::new(fun),
		args: match tl {
			Some(t) => {
				exps.push(t);
				exps
			},
			None => exps,
		}
	},
	Word => Expression::Interpolated(Cow::Borrowed(<>)),
	istr => Expression::Interpolated(<>),
	"$(" <cmd:CommandContext> ")" => Expression::SubShell(Box::new(cmd)),
};

pub(crate) StrongExpression: Expression<'input> = {
	istr => Expression::Interpolated(<>),
	"$(" <cmd:CommandContext> ")" => Expression::SubShell(Box::new(cmd)),
	Value => Expression::Value(<>),
	<fun:Call> "(" <mut exps:(<StrongExpression> ",")*> <tl:StrongExpression?> ")" => Expression::Call {
		function: Box::new(fun),
		args: match tl {
			Some(t) => {
				exps.push(t);
				exps
			},
			None => exps,
		}
	},
	<value:StrongExpression> "=>" <name:Identifier> "(" <args:Comma<StrongExpression>> ")" => Expression::Method {
		name,
		value: Box::new(value),
		args,
	},
	<id:Identifier> => Expression::Variable(id),
	"fn" "(" <args:Comma<Arg>> ")" <ret:Ret?> "{" <body:ExpressionGroup> "}" => 
		Expression::FuncDef {
			args, 
			ret: ret.unwrap_or(Type::Unit), 
			body,
		},
	<expr:StrongExpression> "!" => Expression::Unwrap(Box::new(expr)),
	"if" <cond:StrongExpression> 
		"{" <br_if:ExpressionGroup> "}" "else" 
		"{" <br_else:ExpressionGroup> "}" => Expression::Cond {
		cond: Box::new(cond),
		br_if,
		br_else
	}
};

Ret: Type = {
	"=>" <ty:Type> => ty, 
};

Arg: (Spur, Type) = {
	<name:Identifier> <ty:(":" <Type>)?> => (name, ty.unwrap_or(Type::Dynamic)),
};

Call: Expression<'input> = {
	<id:Identifier> => Expression::Variable(id),
	"(" <e:StrongExpression> ")" => e,
};

Redirection: (RedirectionType, Expression<'input>) = {
	">" <v:Expression> => (RedirectionType::Out, v),
	"<" <v:Expression> => (RedirectionType::In, v),
	">>" <v:Expression> => (RedirectionType::Append, v),
};

pub Command: Command<'input> = {
	<name:Expression> <args:(<Expression>)*> <redirections:(<Redirection>)*> => Command{<>},
};

Pipeline: Pipeline<'input> = {
	<mut commands:(<Command> "|")*> <trailing:Command> => {
		commands.push(trailing);
		Pipeline{ commands }
	}
};

ChainPart: ChainPart<'input> = {
	<p:Pipeline> => ChainPart::Pipeline(p),
	"(" <c:CommandChain> ")" => ChainPart::Chain(Box::new(c)),
};

pub CommandChain: CommandChain<'input> = {
	<c1:ChainPart> "||" <c2:CommandChain> => CommandChain::Or(c1, Box::new(c2)),
	<c1:ChainPart> "&&" <c2:CommandChain> => CommandChain::And(c1, Box::new(c2)),
	<c:Pipeline> => CommandChain::Pipeline(c),
};

pub CommandList: Vec<CommandChain<'input>> = {
	<mut chains:(<CommandChain> ";")*> <trailing:CommandChain> => {
		chains.push(trailing);
		chains
	}
};

Type: Type = {
	"int" => Type::Int,
	"any" => Type::Dynamic,
	"str" => Type::String,
	"bool" => Type::Bool,
	"[" <ty:Type> "]" => Type::List(Box::new(ty)),
};

Identifier: Spur = {
	id => ctx.rodeo.get_or_intern(<>),
};

VariableDefinition: VariableDefinition<'input> = {
	<name:Identifier> <ty:(":" <Type>)?> "=" <expr:StrongExpression> => VariableDefinition{name, expr, ty: ty.unwrap_or(Type::Dynamic)}
};

pub CommandContext: CommandContext<'input> = {
	"let" <mut variables:(<VariableDefinition> ",")*> <trailing:VariableDefinition?> "in" <commands:CommandList> => {
			CommandContext{
				commands,
				variables: match trailing {
					None => variables,
					Some(v) => {variables.push(v); variables}
				}
			}
	},
	<commands:CommandList> => CommandContext{commands, variables: Vec::new()},
}

pub CommandStatement: CommandStatement<'input> = {
	"let" <mut variables:(<VariableDefinition> ",")*> <trailing:VariableDefinition> => {
		CommandStatement::Definitions({
			variables.push(trailing); 
			variables
		})
	},
	<CommandContext> => CommandStatement::Commands(<>),
}

CmdBlockContent: Vec<CommandStatement<'input>> = {
	<mut cmds:(<CommandStatement> "\n")*> <trl:CommandStatement> <_last_newline:"\n"?> => {
		cmds.push(trl);
		cmds
	}
};

CmdBlk: Vec<CommandStatement<'input>> = {
	"cmd" "{" <_nl:"\n"?> <cmds:CmdBlockContent> "}" => cmds,
}

Statement: Statement<'input> = {
	"let" <VariableDefinition> ";" => Statement::VarDef(<>),
	<CmdBlk> => Statement::Cmd{blk: <>, capture: None},
	"capture" "(" <capture:Identifier> ")" <blk:CmdBlk> => Statement::Cmd{blk, capture: Some(capture)},
	<e:StrongExpression> ";" => Statement::Expr(e),
	"fn" <name:Identifier> "(" <args:Comma<Arg>> ")" <ret:Ret?> 
		"{" <body:ExpressionGroup> "}" => Statement::VarDef(
		VariableDefinition {
			name,
			ty: Type::Function { 
				ret: Box::new(ret.clone().unwrap_or(Type::Unit)),
				args: args.iter().map(|(_, t)| t.clone()).collect(),
			},
			expr: Expression::FuncDef {
				ret: ret.unwrap_or(Type::Unit),
				args, 
				body,
			},
		}
	),
	<lhs:StrongExpression> "=" <rhs:StrongExpression> ";" => 
		Statement::Assign {
			lhs,
			rhs,
		}
};

StatementLine: Option<Statement<'input>> = {
	<_nl:"\n"> => None,
	<s:Statement> => Some(s),
};

ExpressionGroup: StatementGroup<'input> = {
	<group:StatementGroup> <expr:StrongExpression?> => StatementGroup {
		group,
		ret: expr.map(Box::new),
	},
}

#[inline]
StatementGroup: Vec<Statement<'input>> = {
	<s:StatementLine*> => s.into_iter().filter_map(|o| o).collect()
}

pub Script: Vec<Statement<'input>> = {
	StatementGroup => <>,
}
